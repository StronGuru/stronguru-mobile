name: Auto-delete source branch on merge into staging

on:
  pull_request:
    types: [closed]
    branches:
      - staging # base branch della PR

permissions:
  contents: write # necessario per cancellare refs (branch)
  pull-requests: read

jobs:
  delete-source-branch:
    name: Delete source branch if merged into staging
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'staging'

    steps:
      - name: Gather context
        id: ctx
        run: |
          echo "source_branch=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"
          echo "source_repo=${{ github.event.pull_request.head.repo.full_name }}" >> "$GITHUB_OUTPUT"
          echo "target_repo=${{ github.repository }}" >> "$GITHUB_OUTPUT"
          echo "default_branch=${{ github.event.pull_request.base.repo.default_branch }}" >> "$GITHUB_OUTPUT"

      - name: Decide whether to delete
        id: decide
        run: |
          set -euo pipefail

          SRC="${{ steps.ctx.outputs.source_branch }}"
          SRC_REPO="${{ steps.ctx.outputs.source_repo }}"
          TGT_REPO="${{ steps.ctx.outputs.target_repo }}"
          DEFAULT="${{ steps.ctx.outputs.default_branch }}"

          echo "PR merged into staging. Source: $SRC (repo: $SRC_REPO), default: $DEFAULT"

          # Non cancellare se:
          # - branch è staging
          # - branch è il default (es. main/master)
          # - branch proviene da un fork (repo diverso)
          if [ "$SRC_REPO" != "$TGT_REPO" ]; then
            echo "from_fork=true" >> "$GITHUB_OUTPUT"
            echo "Will not delete: source branch is in a fork."
            exit 0
          fi

          case "$SRC" in
            staging|main|master)  # protezioni extra oltre al default esplicito
              echo "blocked_name=true" >> "$GITHUB_OUTPUT"
              echo "Will not delete: source branch is protected by name."
              exit 0
              ;;
          esac

          if [ "$SRC" = "$DEFAULT" ]; then
            echo "is_default=true" >> "$GITHUB_OUTPUT"
            echo "Will not delete: source branch is the default branch."
            exit 0
          fi

          echo "eligible=true" >> "$GITHUB_OUTPUT"
          echo "Branch eligible for deletion."

      - name: Delete branch via GitHub API
        if: steps.decide.outputs.eligible == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          REPO="${{ steps.ctx.outputs.target_repo }}"
          BRANCH_RAW="${{ steps.ctx.outputs.source_branch }}"
          # URL-encode degli slash per l'endpoint refs
          BRANCH_ENC="${BRANCH_RAW//\//%2F}"

          echo "Deleting $BRANCH_RAW on $REPO …"
          HTTP_CODE=$(curl -s -o /tmp/resp.txt -w "%{http_code}" -X DELETE \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/git/refs/heads/$BRANCH_ENC" || true)

          echo "GitHub API HTTP $HTTP_CODE"
          if [ "$HTTP_CODE" -eq 204 ]; then
            echo "✅ Branch '$BRANCH_RAW' deleted."
          else
            echo "ℹ️ Unable to delete branch automatically (maybe protected or already deleted). Response:"
            cat /tmp/resp.txt
            # Non fallire il job: il merge è andato a buon fine
          fi
